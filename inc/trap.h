#ifndef JOS_INC_TRAP_H
#define JOS_INC_TRAP_H

// Description                     |  Interrupt   |  Error Code Number
// :--|--:|:--
// Divide error                    |   0          |  No
// Debug exceptions                |   1          |  No
// Breakpoint                      |   3          |  No
// Overflow                        |   4          |  No
// Bounds check                    |   5          |  No
// Invalid opcode                  |   6          |  No
// Coprocessor not available       |   7          |  No
// System error                    |   8          |  Yes (always 0)
// Coprocessor Segment Overrun     |   9          |  No
// Invalid TSS                     |  10          |  Yes
// Segment not present             |  11          |  Yes
// Stack exception                 |  12          |  Yes
// General protection fault        |  13          |  Yes
// Page fault                      |  14          |  Yes
// Coprocessor error               |  16          |  No
// Two-byte SW interrupt           |  0-255       |  No  

// Description              | Interrupt  | Return Address | Exception    | Description
// :--|--:|--:|--:|:--
// Divide error             |  0         | YES            | FAULT        | DIV, IDIV
// Debug exceptions         |  1         | xxx            | xxx          | Any instruction
// Breakpoint               |  3         | NO             | TRAP         | One-byte INT 3
// Overflow                 |  4         | NO             | TRAP         | INTO
// Bounds check             |  5         | YES            | FAULT        | BOUND
// Invalid opcode           |  6         | YES            | FAULT        | Any illegal instruction
// Coprocessor not available|  7         | YES            | FAULT        | ESC, WAIT
// Double fault             |  8         | YES            | ABORT        | Any instruction that can generate an exception Coprocessor Segment
// Overrun                  |  9         | NO             | ABORT        | Any operand of an ESC instruction that wraps around the end of a segment.
// Invalid TSS              | 10         | YES            | FAULT        | An invalid-TSS fault is not restartable if it occurs during the processing of an external interrupt. JMP, CALL, IRET, any interrupt
// Segment not present      | 11         | YES            | FAULT        | Any segment-register modifier
// Stack exception          | 12         | YES            | FAULT        | Any memory reference thru SS
// General Protection       | 13         | YES            | FAULT/ABORT  | All GP faults are restartable. If the fault occurs while attempting to vector to the handler for an external interrupt, the interrupted program is restartable, but the interrupt may be lost.  Any memory reference or code fetch
// Page fault               | 14         | YES            | FAULT        | Any memory reference or code fetch
// Coprocessor error        | 16         | YES            | FAULT        | Coprocessor errors are reported as a fault on the first ESC or WAIT instruction executed after the ESC instruction that caused the error. ESC, WAIT
// Two-byte SW Interrupt    | 0-255      | NO             | TRAP         | INT n



// Trap numbers
// These are processor defined:
#define T_DIVIDE     0		// divide error
#define T_DEBUG      1		// debug exception
#define T_NMI        2		// non-maskable interrupt
#define T_BRKPT      3		// breakpoint
#define T_OFLOW      4		// overflow
#define T_BOUND      5		// bounds check
#define T_ILLOP      6		// illegal opcode
#define T_DEVICE     7		// device not available
#define T_DBLFLT     8		// double fault
/* #define T_COPROC  9 */	// reserved (not generated by recent processors)
#define T_TSS       10		// invalid task switch segment
#define T_SEGNP     11		// segment not present
#define T_STACK     12		// stack exception
#define T_GPFLT     13		// general protection fault
#define T_PGFLT     14		// page fault
/* #define T_RES    15 */	// reserved
#define T_FPERR     16		// floating point error
#define T_ALIGN     17		// aligment check
#define T_MCHK      18		// machine check
#define T_SIMDERR   19		// SIMD floating point error

// These are arbitrarily chosen, but with care not to overlap
// processor defined exceptions or interrupt vectors.
#define T_SYSCALL   48		// system call
#define T_DEFAULT   500		// catchall

#define IRQ_OFFSET	32	// IRQ 0 corresponds to int IRQ_OFFSET

// Hardware IRQ numbers. We receive these as (IRQ_OFFSET+IRQ_WHATEVER)
#define IRQ_TIMER        0
#define IRQ_KBD          1
#define IRQ_SERIAL       4
#define IRQ_SPURIOUS     7
#define IRQ_IDE         14
#define IRQ_ERROR       19

#ifndef __ASSEMBLER__

#include <inc/types.h>

struct PushRegs {
	/* registers as pushed by pusha */
	uint32_t reg_edi;
	uint32_t reg_esi;
	uint32_t reg_ebp;
	uint32_t reg_oesp;		/* Useless */
	uint32_t reg_ebx;
	uint32_t reg_edx;
	uint32_t reg_ecx;
	uint32_t reg_eax;
} __attribute__((packed));

struct Trapframe {
	struct PushRegs tf_regs;
	uint16_t tf_es;
	uint16_t tf_padding1;
	uint16_t tf_ds;
	uint16_t tf_padding2;
	uint32_t tf_trapno;
	/* below here defined by x86 hardware */
	uint32_t tf_err;
	uintptr_t tf_eip;
	uint16_t tf_cs;
	uint16_t tf_padding3;
	uint32_t tf_eflags;
	/* below here only when crossing rings, such as from user to kernel */
	uintptr_t tf_esp;
	uint16_t tf_ss;
	uint16_t tf_padding4;
} __attribute__((packed));


#endif /* !__ASSEMBLER__ */

#endif /* !JOS_INC_TRAP_H */
